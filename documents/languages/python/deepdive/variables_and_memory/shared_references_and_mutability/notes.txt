Shared references happen when two variables point to a same immutable value, so, if we have two variables "a" and "b" and both are pointing to the integer value 10, then they both are pointing to the same memory address, or, when we use a variable "a" with value 10 and pass it to a function that takes a parameter "p" both the "a" as well as the "p" variables are pointing to the same memory address. This is a safe practice since immutable variables are safe and any operations made by them are going to create new values in new memory addressses. When dealing with mutable objects, however, we have to be more careful since their internal state can be altered, for example: if we have two variables that are pointing to the same mutable object on the same memory address, than any alterations using one of those references will alter the internal state of the same object.
