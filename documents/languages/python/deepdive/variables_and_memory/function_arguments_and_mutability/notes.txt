So, it is important to notice that mutable objects are susceptible to uninteded side effects such as altering the object itself when passing it as a function argument. When the object is passed to a function "func(a)", the variable used to describe a parameter "a" begins to point to the memory address that the variable passed as an argument was pointing to, if it is an immutable object, any changes made to the variable will, as we've already seen, change the variable reference to another memory address containing another object with the desired(or unpredictable, if you are like me) internal state. But when a mutable object is passed as an argument to the function "func(a)", both the function scope and the variable passed as an argument are pointing to the same memory address and therefore any changes made to that memory address will alter the internal state of the object itself and not create a brand new object. This, of course, can be remediated(if desired) using a copy or methods alike.
