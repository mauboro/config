So, objects reside in a memory address with two informations inside of them: the first is the data type of the object(tuples, lists, ints, floats, dictionaries, strings, functions, sets, frozen sets, classes and whatnot) and the second is their internal state, or, the data that they contain). Mutable objects are the ones that can have their internal state altered(their data) and immutable objects are the ones that can't. When you change a list element with appending, popping and etc. you are in fact changing the internal state of a list object with an especific memory address, but when you change the value of a variable that holds an immutable object inside of it, you are actually changing the reference of that variable to another object in another memory address. Immutable objects are those: tuples, numbers(ints, floats, booleans and etcetera), frozen sets, strings, user-defined classes(if configured to be so). Mutable objects are those: lists, dictionaries, sets and user-defined classes(if configured to be so). It is important to see that when a tuple(an immutable object) contains lists(mutable objects) and you alter the contents of the lists that the tuple contains, it may appear so, but you didn't actually alter the tuple object, its references remained unchanged, what was altered was the internal state of the list objects that were changed.
